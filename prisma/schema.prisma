generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model Department {
  id         Int          @id @default(autoincrement())
  name       String
  managerId  Int?
  manager    Employee?    @relation("DepartmentManager", fields: [managerId], references: [id])
  employees  Employee[]
  createdAt  DateTime     @default(now())
  companyId  Int
  company    Company      @relation(fields: [companyId], references: [id]) // <--- And this line
  Invitation Invitation[]
}

model Employee {
  id                    Int                 @id @default(autoincrement())
  name                  String
  email                 String              @unique
  phone                 String?
  profilePic            String?
  password              String
  position              String?
  departmentId          Int
  department            Department          @relation(fields: [departmentId], references: [id])
  companyId             Int
  company               Company             @relation(fields: [companyId], references: [id])
  location              String?
  status                EmployeeStatus      @default(ACTIVE)
  avatar                String?
  role                  Role
  dateOfBirth           DateTime?
  address               String?
  emergencyContact      String?
  employmentType        EmploymentType      @default(FULL_TIME)
  salary                Float?
  lastLogin             DateTime?
  resetPasswordToken    String?
  resetPasswordExpires  DateTime?
  attendances           Attendance[]        @relation("EmployeeAttendance")
  leaveRequests         LeaveRequest[]
  payrolls              Payroll[]
  performanceReviews    PerformanceReview[]
  notifications         Notification[]
  qrSecret              String?
  createdAt             DateTime            @default(now())
  managedDepartments    Department[]        @relation("DepartmentManager")
  approvedLeaveRequests LeaveRequest[]      @relation("LeaveApprover")
  reviewsGiven          PerformanceReview[] @relation("Reviewer")
  sentInvitations       Invitation[]
  hrForCompanies        Company[]           @relation("Company_hr")
}

enum Role {
  EMPLOYEE
  DIRECTOR
  HR
  CTO
  CEO
  MANAGEMENT
}

enum EmployeeStatus {
  ACTIVE
  ON_LEAVE
  INACTIVE
}

enum EmploymentType {
  FULL_TIME
  PART_TIME
  CONTRACTOR
}

model Attendance {
  id         Int              @id @default(autoincrement())
  employeeId Int
  employee   Employee         @relation("EmployeeAttendance", fields: [employeeId], references: [id])
  companyId  Int
  company    Company          @relation(fields: [companyId], references: [id])
  date       DateTime
  timeIn     DateTime? // Use DateTime for exact check-in time
  timeOut    DateTime? // Use DateTime for exact check-out time
  status     AttendanceStatus
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt

  @@unique([employeeId, date])
}

enum AttendanceStatus {
  ON_TIME
  ABSENT
  LATE
}

enum LeaveType {
  STUDY
  MATERNITY
  SICK
  VACATION
  ANNUAL
  PERSONAL
}

model LeaveRequest {
  id            Int         @id @default(autoincrement())
  employeeId    Int
  employee      Employee    @relation(fields: [employeeId], references: [id])
  companyId     Int
  company       Company     @relation(fields: [companyId], references: [id])
  leaveType     LeaveType  
  startDate     DateTime
  endDate       DateTime
  days          Int
  status        LeaveStatus @default(PENDING)
  approverId    Int?
  approver      Employee?   @relation("LeaveApprover", fields: [approverId], references: [id])
  comments      String?
  attachmentUrls Json?
  isApproved    Boolean?
  rejectReason  String?
  approvedAt    DateTime?

  createdAt     DateTime    @default(now())
  updatedAt     DateTime
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
}

model Payroll {
  id            Int           @id @default(autoincrement())
  employeeId    Int
  employee      Employee      @relation(fields: [employeeId], references: [id])
  companyId     Int
  company       Company       @relation(fields: [companyId], references: [id])
  periodStart   DateTime
  periodEnd     DateTime
  baseSalary    Float
  bonuses       Float?
  deductions    Float?
  taxes         Float?
  netPay        Float
  status        PayrollStatus @default(PENDING)
  processedDate DateTime?
  paymentMethod String?
  notes         String?
  createdAt     DateTime      @default(now())
}

enum PayrollStatus {
  PENDING
  PROCESSED
  PAID
}

model PerformanceReview {
  id          Int          @id @default(autoincrement())
  employeeId  Int
  employee    Employee     @relation(fields: [employeeId], references: [id])
  companyId   Int
  company     Company      @relation(fields: [companyId], references: [id])
  reviewerId  Int
  reviewer    Employee     @relation("Reviewer", fields: [reviewerId], references: [id])
  periodStart DateTime
  periodEnd   DateTime
  score       Float
  rating      Float
  comments    String?
  status      ReviewStatus @default(IN_PROGRESS)
  createdAt   DateTime     @default(now())
}

enum ReviewStatus {
  COMPLETED
  IN_PROGRESS
}

enum NotificationType {
  LEAVE_REQUEST
  REVIEW
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      Employee @relation(fields: [userId], references: [id])
  message   String
  type      String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  EXPIRED
}

model Invitation {
  id           Int              @id @default(autoincrement())
  email        String
  role         Role
  invitedBy    Int
  position     String
  inviter      Employee         @relation(fields: [invitedBy], references: [id])
  companyId    Int
  company      Company          @relation(fields: [companyId], references: [id])
  departmentId Int
  department   Department       @relation(fields: [departmentId], references: [id])
  status       InvitationStatus @default(PENDING)
  token        String           @unique
  expiresAt    DateTime
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
}

model Company {
  id                 Int                 @id @default(autoincrement())
  companyName        String
  companyEmail       String              @unique
  companyTin         String              @unique
  companyAddress     String
  hrId               Int?
  hr                 Employee?           @relation("Company_hr", fields: [hrId], references: [id])
  companyDescription String
  // Attendance Settings
  timezone           String              @default("UTC")
  workStartTime      String              @default("09:00") // Format: HH:MM
  workEndTime        String              @default("17:00") // Format: HH:MM
  lateThreshold      Int                 @default(15) // Minutes after workStartTime
  checkInDeadline    Int                 @default(15) // Minutes after workEndTime (grace period)
  employees          Employee[]
  departments        Department[]
  attendances        Attendance[]
  leaveRequests      LeaveRequest[]
  payrolls           Payroll[]
  performanceReviews PerformanceReview[]
  invitations        Invitation[]
  createdAt          DateTime            @default(now())
}
