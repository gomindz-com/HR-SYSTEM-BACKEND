generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id                 Int                 @id @default(autoincrement())
  companyName        String
  companyEmail       String?             @unique
  companyTin         String?             @unique
  companyAddress     String?
  hrId               Int?
  companyDescription String?
  timezone           String              @default("UTC")
  workStartTime      String              @default("09:00")
  workEndTime        String              @default("17:00")
  workStartTime2     String              @default("17:00")
  workEndTime2       String              @default("23:59")
  lateThreshold      Int                 @default(15)
  checkInDeadline    Int                 @default(15)
  createdAt          DateTime            @default(now())
  activities         Activity[]
  attendances        Attendance[]
  hr                 Employee?           @relation("Company_hr", fields: [hrId], references: [id])
  locations          CompanyLocation[]
  departments        Department[]
  employees          Employee[]
  EmployeeBenefit    EmployeeBenefit[]
  invitations        Invitation[]
  leaveRequests      LeaveRequest[]
  payrolls           Payroll[]
  performanceReviews PerformanceReview[]
  documents          Document[]
}

model CompanyLocation {
  id          Int          @id @default(autoincrement())
  companyId   Int
  name        String
  latitude    Float
  longitude   Float
  isActive    Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  attendances Attendance[]
  company     Company      @relation(fields: [companyId], references: [id])
}

model Employee {
  id                                    Int                     @id @default(autoincrement())
  employeeId                            String?                 @unique
  name                                  String
  email                                 String                  @unique
  phone                                 String?
  profilePic                            String?
  password                              String
  position                              String?
  departmentId                          Int?
  companyId                             Int
  location                              String?
  status                                EmployeeStatus          @default(ACTIVE)
  avatar                                String?
  role                                  Role
  shiftType                             Shift?                  @default(MORNING_SHIFT)
  dateOfBirth                           DateTime?
  deleted                               Boolean                 @default(false)
  address                               String?
  emergencyContact                      String?
  employmentType                        EmploymentType          @default(FULL_TIME)
  salary                                Float?
  lastLogin                             DateTime?
  resetPasswordToken                    String?
  resetPasswordExpires                  DateTime?
  sumBonuses                            Float?                  @default(0)
  createdAt                             DateTime                @default(now())
  attendances                           Attendance[]            @relation("EmployeeAttendance")
  hrForCompanies                        Company[]               @relation("Company_hr")
  managedDepartments                    Department[]            @relation("DepartmentManager")
  company                               Company                 @relation(fields: [companyId], references: [id])
  department                            Department?             @relation(fields: [departmentId], references: [id])
  EmployeeBenefit                       EmployeeBenefit[]
  EmployeePayrollProfile                EmployeePayrollProfile?
  sentInvitations                       Invitation[]
  approvedLeaveRequests                 LeaveRequest[]          @relation("LeaveApprover")
  leaveRequests                         LeaveRequest[]
  notifications                         Notification[]
  payrolls                              Payroll[]
  finalizedPayrolls Payroll[]               @relation("Payroll_finalizedByToEmployee")
  performanceReviews                    PerformanceReview[]
  reviewsGiven                          PerformanceReview[]     @relation("Reviewer")
  documents                             Document[]
  uploadedDocuments                     Document[]              @relation("DocumentUploader")
}

model Department {
  id         Int          @id @default(autoincrement())
  name       String
  managerId  Int?
  createdAt  DateTime     @default(now())
  companyId  Int
  company    Company      @relation(fields: [companyId], references: [id])
  manager    Employee?    @relation("DepartmentManager", fields: [managerId], references: [id])
  employees  Employee[]
  Invitation Invitation[]
}

model Attendance {
  id         Int              @id @default(autoincrement())
  employeeId Int
  companyId  Int
  locationId Int?
  date       DateTime
  timeIn     DateTime?
  timeOut    DateTime?
  status     AttendanceStatus
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  company    Company          @relation(fields: [companyId], references: [id])
  employee   Employee         @relation("EmployeeAttendance", fields: [employeeId], references: [id])
  location   CompanyLocation? @relation(fields: [locationId], references: [id])

  @@unique([employeeId, date])
}

model LeaveRequest {
  id             Int         @id @default(autoincrement())
  employeeId     Int
  companyId      Int
  leaveType      LeaveType
  startDate      DateTime
  endDate        DateTime
  days           Int
  status         LeaveStatus @default(PENDING)
  approverId     Int?
  comments       String?
  attachmentUrls Json?
  isApproved     Boolean?
  rejectReason   String?
  approvedAt     DateTime?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @default(now())
  approver       Employee?   @relation("LeaveApprover", fields: [approverId], references: [id])
  company        Company     @relation(fields: [companyId], references: [id])
  employee       Employee    @relation(fields: [employeeId], references: [id])
}

model Payroll {
  id                                     Int           @id @default(autoincrement())
  employeeId                             Int
  companyId                              Int
  periodStart                            DateTime
  periodEnd                              DateTime
  baseSalary                             Float
  bonuses                                Float?        @default(0)
  benefitsCost                           Float?        @default(0)
  grossPay                               Float?
  incomeTax                              Float?        @default(0)
  socialSecurity                         Float?        @default(0)
  attendancePenalties                    Float?        @default(0)
  totalDeductions                        Float?        @default(0)
  netPay                                 Float
  status                                 PayrollStatus @default(DRAFT)
  finalizedAt                            DateTime?
  finalizedBy                            Int?
  processedDate                          DateTime?
  paymentMethod                          String?
  notes                                  String?
  hoursWorked                            Float?        @default(0)
  createdAt                              DateTime      @default(now())
  company                                Company       @relation(fields: [companyId], references: [id])
  employee                               Employee      @relation(fields: [employeeId], references: [id])
  finalizedByUser Employee?     @relation("Payroll_finalizedByToEmployee", fields: [finalizedBy], references: [id])
}

model PerformanceReview {
  id          Int          @id @default(autoincrement())
  employeeId  Int
  companyId   Int
  reviewerId  Int
  periodStart DateTime
  periodEnd   DateTime
  score       Float
  rating      Float
  comments    String?
  status      ReviewStatus @default(IN_PROGRESS)
  createdAt   DateTime     @default(now())
  company     Company      @relation(fields: [companyId], references: [id])
  employee    Employee     @relation(fields: [employeeId], references: [id])
  reviewer    Employee     @relation("Reviewer", fields: [reviewerId], references: [id])
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  message   String
  type      String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      Employee @relation(fields: [userId], references: [id])
}

model Invitation {
  id           Int              @id @default(autoincrement())
  email        String
  role         Role
  invitedBy    Int
  employeeId   String?          // Optional field to link to specific employee
  position     String
  companyId    Int
  departmentId Int
  status       InvitationStatus @default(PENDING)
  token        String           @unique
  expiresAt    DateTime
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  company      Company          @relation(fields: [companyId], references: [id])
  department   Department       @relation(fields: [departmentId], references: [id])
  inviter      Employee         @relation(fields: [invitedBy], references: [id])
}

model Activity {
  id          Int      @id @default(autoincrement())
  companyId   Int
  type        String
  title       String
  description String
  priority    String   @default("NORMAL")
  icon        String   @default("default")
  createdAt   DateTime @default(now())
  company     Company  @relation(fields: [companyId], references: [id])
}

model EmployeeBenefit {
  id          String          @id
  employeeId  Int
  companyId   Int
  benefitType BenefitCategory
  amount      Float
  isActive    Boolean         @default(true)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime
  Company     Company         @relation(fields: [companyId], references: [id])
  Employee    Employee        @relation(fields: [employeeId], references: [id])
}

model EmployeePayrollProfile {
  id                 String   @id
  employeeId         Int      @unique
  taxBracket         String?
  socialSecurityRate Float    @default(0)
  customTaxRate      Float?   @default(0)
  createdAt          DateTime @default(now())
  updatedAt          DateTime
  Employee           Employee @relation(fields: [employeeId], references: [id])
}

model Document {
  id          Int      @id @default(autoincrement())
  employeeId  Int
  companyId   Int
  fileName    String
  originalName String
  fileUrl     String
  fileSize    Int
  mimeType    String
  category    DocumentCategory @default(OTHER)
  description String?
  uploadedBy  Int      // Who uploaded the document (admin/HR)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  employee    Employee @relation(fields: [employeeId], references: [id])
  company     Company  @relation(fields: [companyId], references: [id])
  uploader    Employee @relation("DocumentUploader", fields: [uploadedBy], references: [id])
}

enum Role {
  STAFF
  MANAGER
  ADMIN
}

enum EmployeeStatus {
  ACTIVE
  ON_LEAVE
  INACTIVE
}

enum EmploymentType {
  FULL_TIME
  PART_TIME
  CONTRACTOR
}

enum AttendanceStatus {
  ON_TIME
  ABSENT
  LATE
  EARLY
}

enum LeaveType {
  STUDY
  MATERNITY
  SICK
  VACATION
  ANNUAL
  PERSONAL
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
}

enum PayrollStatus {
  DRAFT
  FINALIZED
  PAID
}

enum ReviewStatus {
  COMPLETED
  IN_PROGRESS
}

enum NotificationType {
  LEAVE_REQUEST
  REVIEW
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  EXPIRED
}

enum BenefitCategory {
  CAR_ALLOWANCE
  FOOD_ALLOWANCE
  HOUSING_ALLOWANCE
  TRANSPORT_ALLOWANCE
  MEDICAL_ALLOWANCE
  HEALTH_INSURANCE
  RETIREMENT
  OTHER
}

enum Shift {
  MORNING_SHIFT
  AFTERNOON_SHIFT
}

enum DocumentCategory {
  RESUME
  COVER_LETTER
  ID_DOCUMENT
  BIRTH_CERTIFICATE
  PASSPORT
  WORK_PERMIT
  CONTRACT
  PAYSLIP
  PERFORMANCE_REVIEW
  TRAINING_CERTIFICATE
  MEDICAL_CERTIFICATE
  REFERENCE_LETTER
  DEGREE_CERTIFICATE
  OTHER
}
