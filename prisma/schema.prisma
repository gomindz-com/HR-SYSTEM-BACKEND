generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Department {
  id        Int        @id @default(autoincrement())
  name      String
  managerId Int?
  manager   Employee?  @relation("DepartmentManager", fields: [managerId], references: [id])
  employees Employee[]
  createdAt DateTime   @default(now())
  companyId Int
  company   Company    @relation(fields: [companyId], references: [id]) // <--- And this line
}

model Employee {
  id                   Int                 @id @default(autoincrement())
  name                 String
  email                String              @unique
  phone                String?
  profilePic           String?
  password             String
  position             String?
  departmentId         Int
  department           Department          @relation(fields: [departmentId], references: [id])
  companyId            Int
  company              Company             @relation(fields: [companyId], references: [id])
  location             String?
  status               EmployeeStatus      @default(ACTIVE)
  avatar               String?
  role                 Role
  dateOfBirth          DateTime?
  address              String?
  emergencyContact     String?
  employmentType       EmploymentType      @default(FULL_TIME)
  salary               Float?
  lastLogin            DateTime?
  resetPasswordToken   String?
  resetPasswordExpires DateTime?
  attendances          Attendance[]
  leaveRequests        LeaveRequest[]
  payrolls             Payroll[]
  performanceReviews   PerformanceReview[]
  notifications        Notification[]
  qrSecret             String?
  createdAt            DateTime            @default(now())

  managedDepartments    Department[]        @relation("DepartmentManager")
  approvedAttendances   Attendance[]        @relation("AttendanceApprover")
  approvedLeaveRequests LeaveRequest[]      @relation("LeaveApprover")
  reviewsGiven          PerformanceReview[] @relation("Reviewer")
  sentInvitations       Invitation[]
  hrForCompanies        Company[]           @relation("Company_hr")
}

enum Role {
  EMPLOYEE
  DIRECTOR
  HR
}

enum EmployeeStatus {
  ACTIVE
  ON_LEAVE
  INACTIVE
}

enum EmploymentType {
  FULL_TIME
  PART_TIME
  CONTRACTOR
}

model Attendance {
  id            Int              @id @default(autoincrement())
  employeeId    Int
  employee      Employee         @relation(fields: [employeeId], references: [id])
  companyId     Int
  company       Company          @relation(fields: [companyId], references: [id])
  date          DateTime
  timeIn        String
  timeOut       String
  status        AttendanceStatus
  notes         String?
  location      String?
  approvedBy    Int?
  approver      Employee?        @relation("AttendanceApprover", fields: [approvedBy], references: [id])
  overtimeHours Float?
  qrCheckIn     String? // Store QR code scan data or token
  qrCheckOut    String?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
}

enum LeaveType {
  STUDY
  MATERNITY
  SICK
  OTHER
  VACATION
  ANNUAL
}

model LeaveRequest {
  id            Int         @id @default(autoincrement())
  employeeId    Int
  employee      Employee    @relation(fields: [employeeId], references: [id])
  companyId     Int
  company       Company     @relation(fields: [companyId], references: [id])
  leaveType     LeaveType
  startDate     DateTime
  endDate       DateTime
  days          Int
  reason        String
  status        LeaveStatus @default(PENDING)
  appliedDate   DateTime    @default(now())
  approverId    Int?
  approver      Employee?   @relation("LeaveApprover", fields: [approverId], references: [id])
  comments      String?
  attachmentUrl String?
  createdAt     DateTime    @default(now())
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
}

model Payroll {
  id            Int           @id @default(autoincrement())
  employeeId    Int
  employee      Employee      @relation(fields: [employeeId], references: [id])
  companyId     Int
  company       Company       @relation(fields: [companyId], references: [id])
  periodStart   DateTime
  periodEnd     DateTime
  baseSalary    Float
  bonuses       Float?
  deductions    Float?
  taxes         Float?
  netPay        Float
  status        PayrollStatus @default(PENDING)
  processedDate DateTime?
  paymentMethod String?
  notes         String?
  createdAt     DateTime      @default(now())
}

enum PayrollStatus {
  PENDING
  PROCESSED
  PAID
}

model PerformanceReview {
  id          Int          @id @default(autoincrement())
  employeeId  Int
  employee    Employee     @relation(fields: [employeeId], references: [id])
  companyId   Int
  company     Company      @relation(fields: [companyId], references: [id])
  reviewerId  Int
  reviewer    Employee     @relation("Reviewer", fields: [reviewerId], references: [id])
  periodStart DateTime
  periodEnd   DateTime
  score       Float
  rating      Float
  comments    String?
  status      ReviewStatus @default(IN_PROGRESS)
  createdAt   DateTime     @default(now())
}

enum ReviewStatus {
  COMPLETED
  IN_PROGRESS
}

enum NotificationType {
  LEAVE_REQUEST
  REVIEW
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      Employee @relation(fields: [userId], references: [id])
  message   String
  type      String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  EXPIRED
}

model Invitation {
  id        Int              @id @default(autoincrement())
  email     String
  role      Role
  invitedBy Int
  position  String
  inviter   Employee         @relation(fields: [invitedBy], references: [id])
  companyId Int
  company   Company          @relation(fields: [companyId], references: [id])
  status    InvitationStatus @default(PENDING)
  token     String           @unique
  expiresAt DateTime
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

model Company {
  id                 Int                 @id @default(autoincrement())
  companyName        String
  companyEmail       String              @unique
  companyTin         String              @unique
  companyAddress     String
  hrId               Int?
  hr                 Employee?           @relation("Company_hr", fields: [hrId], references: [id])
  companyDescription String
  employees          Employee[]
  departments        Department[]
  attendances        Attendance[]
  leaveRequests      LeaveRequest[]
  payrolls           Payroll[]
  performanceReviews PerformanceReview[]
  invitations        Invitation[]
  createdAt          DateTime            @default(now())
}
